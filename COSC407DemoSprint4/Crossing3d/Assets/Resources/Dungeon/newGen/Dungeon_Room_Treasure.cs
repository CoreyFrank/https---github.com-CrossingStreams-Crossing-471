using UnityEngine;
using System.Collections;
using System;



public class Dungeon_Room_Treasure : Dungeon_Room {

    private const int ITEM_LIST_MAX = 50;

    private Shader sh1, sh2, sh3, sh4, sh5;
    private Renderer rend;

    protected UnityEngine.Object[] powerUps;
	protected bool[] playersTaken;

    // Use this for initialization
    void Start()
    {
        sh1 = Shader.Find("Dungeon1");
        sh2 = Shader.Find("Dungeon2");
        sh3 = Shader.Find("Dungeon3");
        sh4 = Shader.Find("Dungeon4");
        sh5 = Shader.Find("Dungeon5");

    }
	
	// Update is called once per frame
    void Update()
    {


    }
	
	public Dungeon_Room_Treasure (int id, int xPos, int yPos, char[] seed) : base ( id, xPos, yPos, seed) {
        roomPrefab = Resources.Load("Dungeon/TreasureRoom");
        //roomMapPrefab = Resources.Load("Prefabs/Dungeon/MapTreasureRoom");
    }


    //give the room a set of 4 integers, these integers are id's generated to determine which 
    //components will be added to each item
    public void setPowerupsList(int[] powers) {

        

        //powerUps = powers;

        for (int i = 0; i < 4; i++) {
            var item = thisRoom.transform.FindChild("item" + (i+1)).gameObject.gameObject;
            int maths = (i * powers[i] + (powers[i] + 5) * 12247) + ((i + 1) * (powers[i] * 571));
            maths = maths % ITEM_LIST_MAX;

            //at this point maths can be used to pick which components to add, we just need to add the bit in 
            //where we add those components once they are completed.


            //get capsule material, to change mesh colour for looks
            var itemCaps = item.transform.FindChild("Capsule").gameObject.GetComponent<Renderer>();

            //select a colour, 1-5, maths% 5
            int puColour = (maths * 71 + 56 * (maths / 2)) % 5;
            switch (puColour) {

                case 0:
                    itemCaps.material.shader = sh1;
                    break;
                case 1:
                    itemCaps.material.shader = sh2;
                    break;
                case 2:
                    itemCaps.material.shader = sh3;
                    break;
                case 3:
                    itemCaps.material.shader = sh4;
                    break;
                case 4:
                    itemCaps.material.shader = sh5;
                    break;
                default:
                    itemCaps.material.shader = sh1;
                    break;
            }//switch shader colours

        }

    }
	
    //the spawn items function will grab items from the list of available powerups, for now we only have a few but the function
    //will work when scalled up as well, each room will take the seed and determine a power-up to choose from, the list to choose
    //from will be a global list of all power-ups.
	public void chooseItems() {
        //4 items are spawned into the item room, we need 4 item numbers generated by seed and picked from list
        //for now our list will be of our simple power-ups, later comprehensive list.

        //grab temp prefab to add components to later
        UnityEngine.Object tempItemPrefab = Resources.Load("powerupTemp");

        //build temp array to be our powerups list
        UnityEngine.Object[] tempList = new UnityEngine.Object[ITEM_LIST_MAX];
        for (int i = 0; i < ITEM_LIST_MAX; i ++) {
            tempList[i] = tempItemPrefab;
        }
        //DELETE THIS AND ALL ABOVE LATER!!!!

  
        //maths for determining 4 items, if needed later this can be changed from base items to components, for more flexible items (random items)
        int itemA = (roomXPos+1 * dungeonSeed[7] * ITEM_LIST_MAX) + ITEM_LIST_MAX + (roomYPos+1 * dungeonSeed[3]) + (dungeonSeed[1] * ITEM_LIST_MAX * dungeonSeed[2]);
        int itemB = ((roomXPos + 1) * 1049) * ITEM_LIST_MAX  + (dungeonSeed[6] * +ITEM_LIST_MAX * 389);
        int itemC = ((roomYPos+1) * roomYPos) + (dungeonSeed[9] * 353 * ITEM_LIST_MAX * 211);
        int itemD = dungeonSeed[6] * +ITEM_LIST_MAX * 1427 * dungeonSeed[7] + dungeonSeed[1] * dungeonSeed[2] * 547 * dungeonSeed[3] + dungeonSeed[5] * dungeonSeed[4] * dungeonSeed[8];

        //use big int to determine each item
        itemA = itemA % ITEM_LIST_MAX; //% each number by the max count of possibilities, for later we can change this to sudo random 
        itemB = itemB % ITEM_LIST_MAX;
        itemC = itemC % ITEM_LIST_MAX;
        itemD = itemD % ITEM_LIST_MAX;

        //build list of items
        int[] toSpawn = new int[4];
        toSpawn[0] = itemA;
        toSpawn[1] = itemB;
        toSpawn[2] = itemC;
        toSpawn[3] = itemD;

        //apply item list
        setPowerupsList(toSpawn);

    }



    internal override void instantiate(Vector3 position, Quaternion quaternion)
    {
        thisRoom = (GameObject)GameObject.Instantiate(roomPrefab, position, Quaternion.Euler(0, 0, 0));
        //  GameObject thisMap = (GameObject)GameObject.Instantiate(roomMapPrefab, new Vector3(position.x, position.y, 80),Quaternion.Euler(0, 0, 0));
        //throw new NotImplementedException();

        //after room is instantiated spawn the items
        chooseItems();

    }

}